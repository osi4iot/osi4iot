version: "3"

services:

  mosquitto:
    container_name: ${PLATFORM_NAME}_mosquitto
    build: ./images/mosquitto
    networks:
      - internal_net
    ports:
      - "1883:1883"
      - "8883:8883"
      - "9001:9001"
    volumes:
      - ./config/mosquitto:/mosquitto/config/
      - mosquitto_data:/mosquitto/data/
      - mosquitto_log:/mosquitto/log/
      - ./certs/mqtt_server_certs/:/mosquitto/mqtt_certs/
      - ./certs/domain_certs/:/run/secrets/
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro          
    restart: unless-stopped

  nginx_proxy:
    container_name: ${PLATFORM_NAME}_nginx_proxy
    build: ./images/nginx
    networks:
      - internal_net
    ports: 
      - "80:80"
      - "443:443"
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
    restart: unless-stopped
    volumes:
      - ./images/nginx/static/:/static/
      - ./certs/domain_certs/:/etc/ssl/certs/
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro      
    depends_on:
      - nodered

  nodered:
    container_name: ${PLATFORM_NAME}_nodered
    build: ./images/nodered
    user: "${UID}:${GID}"
    networks:
      - internal_net
    env_file:
      - .env
    ports:
      - "127.0.0.1:1880:1880"
    volumes:
      - nodered_data:/data
      - ./certs/mqtt_nodered_certs/:/data/certs/
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy   

  postgres:
    container_name: ${PLATFORM_NAME}_postgres
    build:
      context: ./images/postgres
    networks:
      - internal_net  
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      GRAFANA_DB_PASSWORD: ${GRAFANA_DB_PASSWORD}
      GRAFANA_DATASOURCE_PASSWORD: ${GRAFANA_DATASOURCE_PASSWORD}
      TZ: ${TIME_ZONE}      
    volumes:
      - pgdata:/var/lib/postgresql/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro      
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 4s
      timeout: 120s
      retries: 30
    restart: unless-stopped

  grafana:
    container_name: ${PLATFORM_NAME}_grafana
    build: ./images/grafana
    user: "${UID}:${GID}"
    networks:
      - internal_net      
    ports:
      - "127.0.0.1:5000:5000"
    volumes:
      - grafana_data:/var/lib/grafana
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
      - DEFAULT_TIME_ZONE=${DEFAULT_TIME_ZONE}       
      - GF_INSTALL_PLUGINS=grafana-clock-panel,natel-discrete-panel,briangann-gauge-panel,vonage-status-panel,neocat-cal-heatmap-panel
      - GRAFANA_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GRAFANA_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - HOME_DASHBOARD_PATH=/var/lib/grafana/data/home_dashboard.json
      - NOTIFICATIONS_EMAIL_USER=${NOTIFICATIONS_EMAIL_USER}
      - NOTIFICATIONS_EMAIL_ADDRESS=${NOTIFICATIONS_EMAIL_ADDRESS}
      - NOTIFICATIONS_EMAIL_PASSWORD=${NOTIFICATIONS_EMAIL_PASSWORD}
      - GF_RENDERING_SERVER_URL=http://grafana_renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://grafana:5000/grafana/
      - GF_LOG_FILTERS=rendering:debug
      - POSTGRES_DB=${POSTGRES_DB}
      - GRAFANA_DB_PASSWORD=${GRAFANA_DB_PASSWORD}
      - GRAFANA_DATASOURCE_PASSWORD=${GRAFANA_DATASOURCE_PASSWORD}
      - MAIN_ORGANIZATION_NAME=${MAIN_ORGANIZATION_NAME}
      - MAIN_ORGANIZATION_DATASOURCE_NAME=${MAIN_ORGANIZATION_DATASOURCE_NAME}
    healthcheck:
      test: ["CMD-SHELL", "curl -f localhost:5000/api/health || exit 1"]
      interval: 10s
      timeout: 300s
      retries: 30
    depends_on:
      postgres:
        condition: service_healthy     
    restart: unless-stopped

  pgadmin4:
    container_name: ${PLATFORM_NAME}_pgadmin
    build:
      context: ./images/pgadmin4 
      dockerfile: Dockerfile.rpi4
    user: "${UID}:${GID}"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      POSTGRES_USER: ${POSTGRES_USER}
    volumes:
      - pgadmin4_data:/var/lib/pgadmin
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro      
    ports:
      - "127.0.0.1:5050:80"
    networks:
      - internal_net
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost || exit 1"]
      interval: 10s
      timeout: 300s
      retries: 30      
    restart: unless-stopped

  admin_api:
    build:
      context: ./images/admin_api
      dockerfile: Dockerfile.rpi4
    container_name: ${PLATFORM_NAME}_admin_api
    networks:
      - internal_net
    restart: always 
    volumes:
      - ./certs/mqtt_server_certs/ca.crt:/app/mqtt_certs/ca.crt
      - ./certs/mqtt_server_certs/ca.key:/app/mqtt_certs/ca.key
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    working_dir: /app
    env_file:
      - .env
    environment:
      PORT: 3200
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --insecure https://localhost:3200/health || exit 1"]
      interval: 10s
      timeout: 300s
      retries: 30
    ports:
    - "127.0.0.1:3200:3200"
    depends_on:
      grafana:
        condition: service_healthy    

  frontend:
    build: 
      context: ./images/frontend
      dockerfile: Dockerfile
    container_name: ${PLATFORM_NAME}_frontend
    environment:
      PLATFORM_NAME: ${PLATFORM_NAME}
      DOMAIN_NAME: ${DOMAIN_NAME}
      DOMAIN_NAME: ${DOMAIN_NAME}
      MIN_LONGITUDE: ${MIN_LONGITUDE}
      MAX_LONGITUDE: ${MAX_LONGITUDE}
      MIN_LATITUDE: ${MIN_LATITUDE}
      MAX_LATITUDE: ${MAX_LATITUDE}
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - internal_net
    command: nginx -g "daemon off";
    depends_on:   
      admin_api:
        condition: service_started
  
  portainer:
    build:
      context: ./images/portainer
      dockerfile: Dockerfile
    container_name: ${PLATFORM_NAME}_portainer
    networks:
      - internal_net
    command: -H unix:///var/run/docker.sock
    restart: unless-stopped
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro        

volumes:
  mosquitto_data:
  mosquitto_log:
  nodered_data:
  pgdata:
  pgadmin4_data:
  portainer_data:
  grafana_data:

networks:
  internal_net:


networks:
  internal_net:

