package initiatePlatform

import (
	"log"
	"strings"
	"time"

	tea "github.com/charmbracelet/bubbletea"
	"github.com/osi4iot/osi4iot/utils/osi4iot_go_cli/internals/data"
	"github.com/osi4iot/osi4iot/utils/osi4iot_go_cli/internals/utils"
	"github.com/osi4iot/osi4iot/utils/osi4iot_go_cli/ui/form"
	clipboard "github.com/tiagomelo/go-clipboard/clipboard"
)

func Create() {
	p := tea.NewProgram(initialModel())

	if _, err := p.Run(); err != nil {
		log.Fatal(err)
	}
}

func initialModel() form.Model {
	newClipboard := clipboard.New()
	model := form.Model{
		Questions: []form.Question{
			{
				Key:           "PLATFORM_NAME",
				QuestionType:  "generic",
				Prompt:        "Platform name",
				Answer:        data.Data.PlatformInfo.PlatformName,
				DefaultAnswer: "OSI-DEMO",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "isString", "platformName"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "DOMAIN_NAME",
				QuestionType:  "generic",
				Prompt:        "Domain name",
				Answer:        data.Data.PlatformInfo.DomainName,
				DefaultAnswer: "",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "isString"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "PLATFORM_PHRASE",
				QuestionType:  "generic",
				Prompt:        "Platform motivational phrase",
				Answer:        data.Data.PlatformInfo.PlatformPhrase,
				DefaultAnswer: "Open source integration for internet of things",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "isString"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "PLATFORM_ADMIN_FIRST_NAME",
				QuestionType:  "generic",
				Prompt:        "Platform admin first name",
				Answer:        data.Data.PlatformInfo.PlatformAdminFirstName,
				DefaultAnswer: "",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "isString", "minlen:2", "maxlen:20"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "PLATFORM_ADMIN_SURNAME",
				QuestionType:  "generic",
				Prompt:        "Platform admin last name",
				Answer:        data.Data.PlatformInfo.PlatformAdminSurname,
				DefaultAnswer: "",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "isString", "minlen:2", "maxlen:20"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "PLATFORM_ADMIN_USER_NAME",
				QuestionType:  "generic",
				Prompt:        "Platform admin user name",
				Answer:        data.Data.PlatformInfo.PlatformAdminUserName,
				DefaultAnswer: "",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "isString", "minlen:6", "maxlen:20"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:          "PLATFORM_ADMIN_EMAIL",
				QuestionType: "generic",
				Prompt:       "Platform admin email",
				Answer:       data.Data.PlatformInfo.PlatformAdminEmail,
				ErrorMessage: "",
				Choices:      []string{},
				ChoiceFocus:  0,
				Rules:        []string{"required", "email"},
				ActionKey:    "",
				Margin:       0,
			},
			{
				Key:           "PLATFORM_ADMIN_PASSWORD_INI",
				QuestionType:  "password",
				Prompt:        "Platform admin password",
				Answer:        data.Data.PlatformInfo.PlatformAdminPassword,
				DefaultAnswer: "",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "string", "password"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "PLATFORM_ADMIN_PASSWORD",
				QuestionType:  "password",
				Prompt:        "Retype platform admin password",
				Answer:        data.Data.PlatformInfo.PlatformAdminPassword,
				DefaultAnswer: "",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "string", "password", "matchPrevious"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "MIN_LONGITUDE",
				QuestionType:  "generic",
				Prompt:        "Min longitude of the geographical zone of the platform",
				Answer:        utils.FloatValueToStr(data.Data.PlatformInfo.MinLongitude),
				DefaultAnswer: "-10.56884765625",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "float", "minval:-180", "maxval:180"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "MAX_LONGITUDE",
				QuestionType:  "generic",
				Prompt:        "Max longitude of the geographical zone of the platform",
				Answer:        utils.FloatValueToStr(data.Data.PlatformInfo.MaxLongitude),
				DefaultAnswer: "1.42822265625",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "float", "minval:-180", "maxval:180"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "MIN_LATITUDE",
				QuestionType:  "generic",
				Prompt:        "Min latitude of the geographical zone of the platform",
				Answer:        utils.FloatValueToStr(data.Data.PlatformInfo.MinLatitude),
				DefaultAnswer: "35.55010533588552",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "float", "minval:-90", "maxval:90"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "MAX_LATITUDE",
				QuestionType:  "generic",
				Prompt:        "Max latitude of the geographical zone of the platform",
				Answer:        utils.FloatValueToStr(data.Data.PlatformInfo.MaxLatitude),
				DefaultAnswer: "44.134913443750726",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "float", "minval:-90", "maxval:90"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "DEFAULT_TIME_ZONE",
				QuestionType:  "generic",
				Prompt:        "Default time zone",
				Answer:        data.Data.PlatformInfo.DefaultTimeZone,
				DefaultAnswer: "Europe/Madrid",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "isString", "timeZone"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "MAIN_ORGANIZATION_NAME",
				QuestionType:  "generic",
				Prompt:        "Main organization name",
				Answer:        data.Data.PlatformInfo.MainOrganizationName,
				DefaultAnswer: "",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "isString", "minlen:4", "maxlen:40"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "MAIN_ORGANIZATION_ACRONYM",
				QuestionType:  "generic",
				Prompt:        "Main organization acronym",
				Answer:        data.Data.PlatformInfo.MainOrganizationAcronym,
				DefaultAnswer: "",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "isString", "minlen:3", "maxlen:11"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "MAIN_ORGANIZATION_ADDRESS1",
				QuestionType:  "generic",
				Prompt:        "Main organization address",
				Answer:        data.Data.PlatformInfo.MainOrganizationAddress1,
				DefaultAnswer: "",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "isString", "minlen:4", "maxlen:50"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "MAIN_ORGANIZATION_CITY",
				QuestionType:  "generic",
				Prompt:        "Main organization city",
				Answer:        data.Data.PlatformInfo.MainOrganizationCity,
				DefaultAnswer: "",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "isString", "minlen:4", "maxlen:50"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "MAIN_ORGANIZATION_ZIP_CODE",
				QuestionType:  "generic",
				Prompt:        "Main organization zip code",
				Answer:        data.Data.PlatformInfo.MainOrganizationZipCode,
				DefaultAnswer: "",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "isString", "minlen:5", "maxlen:50"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "MAIN_ORGANIZATION_STATE",
				QuestionType:  "generic",
				Prompt:        "Main organization state/province",
				Answer:        data.Data.PlatformInfo.MainOrganizationState,
				DefaultAnswer: "",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "isString", "minlen:4", "maxlen:50"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "MAIN_ORGANIZATION_COUNTRY",
				QuestionType:  "generic",
				Prompt:        "Main organization country",
				Answer:        data.Data.PlatformInfo.MainOrganizationCountry,
				DefaultAnswer: "",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "country"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "MAIN_ORGANIZATION_BUILDING_PATH",
				QuestionType:  "generic",
				Prompt:        "Main organization building path",
				Answer:        data.Data.PlatformInfo.MainOrganizationBuildingPath,
				DefaultAnswer: "./geojson/main_org_building.geojson",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "string", "fileOrFieldExists"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "MAIN_ORGANIZATION_FLOOR_PATH",
				QuestionType:  "generic",
				Prompt:        "Main organization floor path",
				Answer:        data.Data.PlatformInfo.MainOrganizationFirstFloorPath,
				DefaultAnswer: "./geojson/main_org_first_floor.geojson",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "string", "fileOrFieldExists"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "TELEGRAM_BOTTOKEN",
				QuestionType:  "generic",
				Prompt:        "Telegram boottoken for main organization default group",
				Answer:        data.Data.PlatformInfo.TelegramBotToken,
				DefaultAnswer: "",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "string", "minlen:20"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "MAIN_ORGANIZATION_TELEGRAM_CHAT_ID",
				QuestionType:  "generic",
				Prompt:        "Telegram chat id for main organization default group",
				Answer:        data.Data.PlatformInfo.MainOrganizationTelegramChatID,
				DefaultAnswer: "",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "int"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "MAIN_ORGANIZATION_TELEGRAM_INVITATION_LINK",
				QuestionType:  "generic",
				Prompt:        "Telegram invitation link for main organization default group",
				Answer:        data.Data.PlatformInfo.MainOrganizationTelegramInviteLink,
				DefaultAnswer: "",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "url"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "NUMBER_OF_NODERED_INSTANCES_IN_MAIN_ORG",
				QuestionType:  "generic",
				Prompt:        "Number of node-red instances in main org",
				Answer:        utils.IntValueToStr(data.Data.PlatformInfo.NumberOfNodeRedInstancesInMainOrg),
				DefaultAnswer: "1",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "int", "minval:1", "maxval:10"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "NOTIFICATIONS_EMAIL_ADDRESS",
				QuestionType:  "generic",
				Prompt:        "Email account for platform notifications",
				Answer:        data.Data.PlatformInfo.NotificationsEmailAddress,
				DefaultAnswer: "",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "email"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "NOTIFICATIONS_EMAIL_PASSWORD",
				QuestionType:  "password",
				Prompt:        "Email account password",
				Answer:        data.Data.PlatformInfo.NotificationsEmailPassword,
				DefaultAnswer: "",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "string", "password"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "REGISTRATION_TOKEN_LIFETIME",
				QuestionType:  "generic",
				Prompt:        "Registration token lifetime in seconds",
				Answer:        utils.IntValueToStr(data.Data.PlatformInfo.RegistrationTokenLifetime),
				DefaultAnswer: "86400",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "int", "minval:3600"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "ACCESS_TOKEN_LIFETIME",
				QuestionType:  "generic",
				Prompt:        "Access token lifetime in seconds",
				Answer:        utils.IntValueToStr(data.Data.PlatformInfo.AccessTokenLifetime),
				DefaultAnswer: "604800",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "int", "minval:3600"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "REFRESH_TOKEN_LIFETIME",
				QuestionType:  "generic",
				Prompt:        "Refresh token lifetime in seconds",
				Answer:        utils.IntValueToStr(data.Data.PlatformInfo.RefreshTokenLifetime),
				DefaultAnswer: "31536000",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "int", "minval:86400"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "MQTT_SSL_CERTS_VALIDITY_DAYS",
				QuestionType:  "generic",
				Prompt:        "Mqtt ssl certs validity days",
				Answer:        utils.IntValueToStr(data.Data.PlatformInfo.MQTTSslCertsValidityDays),
				DefaultAnswer: "365",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "int", "minval:30"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "TIMESCALE_DATA_RET_INT_DAYS",
				QuestionType:  "generic",
				Prompt:        "Data retention interval in days for timescaldb",
				Answer:        strings.Split(data.Data.PlatformInfo.TimescaleDataRetentionInterval, " ")[0],
				DefaultAnswer: "7",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "int", "minval:1"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "DEPLOYMENT_LOCATION",
				QuestionType:  "list",
				Prompt:        "Select the place of deployment of the platform",
				Answer:        data.Data.PlatformInfo.DeploymentLocation,
				DefaultAnswer: "",
				ErrorMessage:  "",
				Choices: []string{
					"Local deployment",
					"On-premise cluster deployment",
					"AWS cluster deployment",
				},
				ChoiceFocus: utils.GiveChoiceFocus(data.Data.PlatformInfo.DeploymentLocation,
					[]string{
						"Local deployment",
						"On-premise cluster deployment",
						"AWS cluster deployment",
					}, 0),
				Rules:     []string{"required"},
				ActionKey: "deploymentLocation",
				Margin:    0,
			},
			{
				Key:           "NUMBER_OF_CPUS_PER_NODE",
				QuestionType:  "list",
				Prompt:        "Select the number of CPUs per cluster node",
				Answer:        data.Data.PlatformInfo.NumberOfCPUsPerNode,
				DefaultAnswer: "",
				ErrorMessage:  "",
				Choices:       []string{"2", "4", "8", "16", "32"},
				ChoiceFocus: utils.GiveChoiceFocus(data.Data.PlatformInfo.NumberOfCPUsPerNode,
					[]string{"2", "4", "8", "16", "32"}, 0),
				Rules:     []string{"required"},
				ActionKey: "",
				Margin:    0,
			},
			{
				Key:           "RAM_MEMORY_PER_NODE",
				QuestionType:  "list",
				Prompt:        "Select the amount of RAM memory in GiB per cluster node",
				Answer:        data.Data.PlatformInfo.RAMMemoryPerNode,
				DefaultAnswer: "",
				ErrorMessage:  "",
				Choices:       []string{"4 GiB", "8 GiB", "16 GiB", "32 GiB"},
				ChoiceFocus: utils.GiveChoiceFocus(data.Data.PlatformInfo.RAMMemoryPerNode,
					[]string{"4 GiB", "8 GiB", "16 GiB", "32 GiB"}, 0),
				Rules:     []string{"required"},
				ActionKey: "",
				Margin:    0,
			},
			{
				Key:           "S3_BUCKET_TYPE",
				QuestionType:  "list",
				Prompt:        "Choose the type of S3 bucket to be used",
				Answer:        data.Data.PlatformInfo.S3BucketType,
				DefaultAnswer: "",
				ErrorMessage:  "",
				Choices:       []string{"Local Minio", "Cloud AWS S3"},
				ChoiceFocus: utils.GiveChoiceFocus(data.Data.PlatformInfo.S3BucketType,
					[]string{"Local Minio", "Cloud AWS S3"}, 0),
				Rules:     []string{"required"},
				ActionKey: "awsS3BucketQuestions",
				Margin:    0,
			},
			{
				Key:           "S3_BUCKET_NAME",
				QuestionType:  "generic",
				Prompt:        "S3 storage bucket name",
				Answer:        data.Data.PlatformInfo.S3BucketName,
				DefaultAnswer: "",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "string", "s3BucketName"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "DOMAIN_CERTS_TYPE",
				QuestionType:  "list",
				Prompt:        "Choose the type of domain ssl certs to be used",
				Answer:        data.Data.PlatformInfo.DomainCertsType,
				DefaultAnswer: "",
				ErrorMessage:  "",
				Choices: []string{
					"No certs",
					"Certs provided by an CA",
					"Let's encrypt certs with HTTP-01 challenge",
					"Let's encrypt certs with DNS-01 challenge and AWS Route 53 provider",
					"AWS Certificate Manager",
				},
				ChoiceFocus: utils.GiveChoiceFocus(data.Data.PlatformInfo.DomainCertsType,
					[]string{
						"No certs",
						"Certs provided by an CA",
						"Let's encrypt certs with HTTP-01 challenge",
						"Let's encrypt certs with DNS-01 challenge and AWS Route 53 provider",
						"AWS Certificate Manager",
					}, 0),
				Rules:     []string{"required", "domainCertsType"},
				ActionKey: "domainCertsQuestions",
				Margin:    0,
			},
			{
				Key:           "DEPLOYMENT_MODE",
				QuestionType:  "list",
				Prompt:        "Select deployment mode",
				Answer:        data.Data.PlatformInfo.DeploymentMode,
				DefaultAnswer: "",
				ErrorMessage:  "",
				Choices:       []string{"development", "production"},
				ChoiceFocus: utils.GiveChoiceFocus(data.Data.PlatformInfo.DeploymentMode,
					[]string{"development", "production"}, 0),
				Rules:     []string{"required"},
				ActionKey: "",
				Margin:    0,
			},
			{
				Key:           "DOCKER_IMAGES_VERSION",
				QuestionType:  "list",
				Prompt:        "Select docker images version",
				Answer:        data.Data.PlatformInfo.DockerImagesVersion,
				DefaultAnswer: "1.3.0",
				ErrorMessage:  "",
				Choices:       []string{"1.3.0"},
				ChoiceFocus:   0,
				Rules:         []string{"required"},
				ActionKey:     "",
				Margin:        0,
			},
			{
				Key:           "confirmAnswers",
				QuestionType:  "generic",
				Prompt:        "Do you want to confirm the answers? (y/n)",
				Answer:        "",
				DefaultAnswer: "",
				ErrorMessage:  "",
				Choices:       []string{},
				ChoiceFocus:   0,
				Rules:         []string{"required", "string", "confirmAnswers"},
				ActionKey:     "createPlatform",
				Margin:        0,
			},
		},
		Focus:    0,
		Cursor:   0,
		Loading:  false,
		Finished: false,
		SubmitMsgMap: map[string]string{
			"createPlatform":          "Create platform",
			"creatingNodeQuestions": "Adding node questions",
			"copyKeyInNode":         "Copying public key in node",
			"deploymentLocation":    "Setting questions for the deployment location selected",
		},
		RecievedMsg:   "",
		PageSize:      10,
		CurrentPage:   1,
		TickInterval:  500 * time.Millisecond,
		CursorVisible: true,
		Clipboard:     newClipboard,
		Data:          map[string]interface{}{"numNodes": 0},
	}

	model.Cursor = len(model.Questions[0].Answer)

	if data.Data.PlatformInfo.MainOrganizationBuilding == "" {
		if data.Data.PlatformInfo.MainOrganizationBuildingPath != "" {
			path := data.Data.PlatformInfo.MainOrganizationBuildingPath
			if utils.FileExists(path) {
				mainOrgBuilding := utils.GetFileData(path)
				data.Data.PlatformInfo.MainOrganizationBuilding = mainOrgBuilding
			}
		}
	}

	if data.Data.PlatformInfo.MainOrganizationFirstFloor == "" {
		if data.Data.PlatformInfo.MainOrganizationFirstFloorPath != "" {
			path := data.Data.PlatformInfo.MainOrganizationFirstFloorPath
			if utils.FileExists(path) {
				mainOrgFirstFloor := utils.GetFileData(path)
				data.Data.PlatformInfo.MainOrganizationFirstFloor = mainOrgFirstFloor
			}
		}
	}

	// if data.Data.PlatformInfo.DomainCertsType == "Certs provided by an CA" {
	// 	pathKey := data.Data.PlatformInfo.DOMAIN_SSL_PRIVATE_KEY_PATH
	// 	if pathKey != "" && data.Data.Certs.DomainCerts.PrivateKey == "" {
	// 		domainSSLPrivateKey := utils.GetFileData(pathKey)
	// 		data.Data.Certs.DomainCerts.PrivateKey = domainSSLPrivateKey
	// 	}

	// 	pathCert := data.Data.PlatformInfo.DOMAIN_SSL_CERT_CRT_PATH
	// 	if pathCert != "" && data.Data.Certs.DomainCerts.SslCertCrt == "" {
	// 		domainSSLCertCrt := utils.GetFileData(pathCert)
	// 		data.Data.Certs.DomainCerts.SslCertCrt = domainSSLCertCrt
	// 	}

	// 	pathCa := data.Data.PlatformInfo.DOMAIN_SSL_CA_PEM_PATH
	// 	if pathCa != "" && data.Data.Certs.DomainCerts.SslCaPem == "" {
	// 		domainSSLCaPem := utils.GetFileData(pathCa)
	// 		data.Data.Certs.DomainCerts.SslCaPem = domainSSLCaPem
	// 	}
	// 	form.DomainCertsQuestions(&model)
	// }

	if data.Data.PlatformInfo.DeploymentLocation != "Local deployment" {
		form.DeployLocationQuestions(&model)
	}

	return model
}
