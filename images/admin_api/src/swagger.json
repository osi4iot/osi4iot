{
	"openapi": "3.0.0",
	"info": {
		"version": "1.0.0",
		"title": "OSI4IOT DEMO Platform",
		"description": "Open source integration for internet of things",
		"license": {
			"name": "Apache 2.0",
			"url": "https://opensource.org/licenses/Apache-2.0"
		}
	},
	"servers": [
		{
			"url": "https://localhost/admin_api/",
			"description": "Url behind proxy"
		}
	],
	"components": {
		"securitySchemes": {
			"bearerAuth": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	},
	"security": [
		{
			"bearerAuth": []
		}
	],
	"tags": [
		{
			"name": "Authentication",
			"description": "Platform authentication - Default role required: User"
		},
		{
			"name": "Application",
			"description": "Platform managment - Role required: Platform_Admin"
		},
		{
			"name": "Organization",
			"description": "Management of organizations in the IOT Platform - Default role required: Organization_Admin"
		},
		{
			"name": "Building",
			"description": "Management of buildings in the IOT Platform - Role required: Platform_Admin"
		},		
		{
			"name": "Group",
			"description": "Management of groups in organizations of the IOT Platform - Default role required: Group_Admin"
		},
		{
			"name": "Device",
			"description": "Management of devices in groups of an organization of the IOT Platform - Default role required: Group_Admin"
		},
		{
			"name": "Topic",
			"description": "Management of topics of devices of the IOT Platform - Default role required: Group_Admin"
		},
		{
			"name": "Measurement",
			"description": "Management of measurements of sensors of the IOT Platform - Default role required: Group_Admin"
		},
		{
			"name": "Digital twin",
			"description": "Management of digital twin of devices of the IOT Platform - Default role required: Group_Admin"
		},
		{
			"name": "Dashboard",
			"description": "List of dashboards of the IOT Platform - Default role required: Group_Admin"
		}				
	],
	"consumes": ["application/json"],
	"produces": ["application/json"],
	"paths": {
		"/auth/register": {
			"patch": {
				"tags": ["Authentication"],
				"summary": "User registration in the plataform",
				"requestBody": {
					"description": "User registration data",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/UserRegister"
							}
						}
					}
				},
				"produces": ["application/json"],
				"responses": {
					"200": {
						"description": "User password modified correctly",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			}
		},
		"/auth/user_data_for_register": {
			"get": {
				"tags": ["Authentication"],
				"summary": "User firstName, surname and email to complete registration form - Register token required",
				"produces": ["application/json"],
				"responses": {
					"200": {
						"description": "User firstName, surname and email",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/UserRegisterData"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			}
		},
		"/auth/user_profile": {
			"get": {
				"tags": ["Authentication"],
				"summary": "User profile",
				"produces": ["application/json"],				
				"responses": {
					"200": {
						"description": "User profile",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/UserProfile"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			},
			"patch": {
				"tags": ["Authentication"],
				"summary": "Update profile",
				"requestBody": {
					"description": "User registration data",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/UserRegister"
							}
						}
					}
				},				
				"produces": ["application/json"],
				"responses": {
					"200": {
						"description": "User profile",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/UserProfile"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			}
		},				
		"/auth/login": {
			"post": {
				"tags": ["Authentication"],
				"summary": "Login in the platform administration",
				"security": [],
				"requestBody": {
					"description": "User credentials",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/Login"
							}
						}
					}
				},
				"produces": ["application/json"],
				"responses": {
					"200": {
						"description": "User validated. Access and refresh token delivered",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/LoginOutput"
								}
							}
						}
					},
					"401": {
						"description": "User credentials not correct.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			}
		},
		"/auth/update_token": {
			"patch": {
				"tags": ["Authentication"],
				"summary": "Update refresh token",
				"produces": ["application/json"],
				"responses": {
					"200": {
						"description": "Token updated. Access and refresh token delivered",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/LoginOutput"
								}
							}
						}
					},
					"401": {
						"description": "User credentials not correct.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			}
		},
		"/auth/refresh_tokens": {
			"get": {
				"tags": ["Authentication"],
				"summary": "All refresh tokens - Role required: PlaformAdmin",
				"produces": ["application/json"],
				"responses": {
					"200": {
						"description": "All refresh tokens",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/UserManagedComponents"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			}
		},	
		"/auth/disable_refresh_token": {
			"delete": {
				"tags": ["Authentication"],
				"summary": "Disable refresh token - Role required: Platform_Admin",
				"requestBody": {
					"description": "User credentials",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/DisableRefreshToken"
							}
						}
					}
				},
				"produces": ["application/json"],
				"responses": {
					"200": {
						"description": "Token disabled successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "User credentials not correct.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			}
		},	
		"/auth/disable_user_refresh_tokens/{userId}": {
			"parameters": [
				{
					"name": "userId",
					"in": "path",
					"required": true,
					"description": "id of the user",
					"type": "string"
				}
			],			
			"delete": {
				"tags": ["Authentication"],
				"summary": "Disable all refresh tokens of a user - Role required: Platform_Admin",
				"produces": ["application/json"],
				"responses": {
					"200": {
						"description": "Token disabled successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "User credentials not correct.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			}
		},			
		"/auth/change_password": {
			"patch": {
				"tags": ["Authentication"],
				"summary": "Change user password",
				"requestBody": {
					"description": "New password",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/New_password"
							}
						}
					}
				},
				"produces": ["application/json"],
				"responses": {
					"200": {
						"description": "User password modified correctly",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			}
		},
		"/auth/user_managed_components": {
			"get": {
				"tags": ["Authentication"],
				"summary": "Components (orgs, groups and devices) managed by logged user",
				"produces": ["application/json"],
				"responses": {
					"200": {
						"description": "Components (orgs, groups and devices) managed by logged user",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/UserManagedComponents"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			}
		},			
		"/application/global_users": {
			"get": {
				"tags": ["Application"],
				"summary": "Get all global users",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GlobalUsersOutput"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			},
			"post": {
				"tags": ["Application"],
				"summary": "Create global users",
				"requestBody": {
					"description": "Global user data",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/GlobalUsersInput"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"409": {
						"description": "Already exists an user with the same data",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/AlreadyExistsMessage"
								}
							}
						}
					}                    
				}
			}
		},
		"/application/global_user": {
			"post": {
				"tags": ["Application"],
				"summary": "Create a global user",
				"requestBody": {
					"description": "Global user data",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/GlobalUserInput"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"409": {
						"description": "Already exists an user with the same data",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/AlreadyExistsMessage"
								}
							}
						}
					}                    
				}
			}
		},
		"/application/global_user/{propName}/{propValue}": {
			"parameters": [
				{
					"name": "propName",
					"in": "path",
					"required": true,
					"description": "id, login or email of the user",
					"type": "string"
				},
				{
					"name": "propValue",
					"in": "path",
					"required": true,
					"description": "User property value",
					"type": "string"
				}
			],
			"get": {
				"tags": ["Application"],
				"summary": "Get an specific user data of the platform",
				"responses": {
					"200": {
						"description": "Give the user of the platform",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GlobalUserOutput"
								}
							}
						}
					},
					"400": {
						"description": "Invalid propName",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/InvalidPropName"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "User not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/NotFoundMessage"
								}
							}
						}
					}                
				}
			},
			"patch": {
				"tags": ["Application"],
				"summary": "Update an specific user of the platform.",
				"requestBody": {
					"description": "Global user data",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/GlobalUserUpdate"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "User not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/NotFoundMessage"
								}
							}
						}
					}                    
				}
			},
			"delete": {
				"tags": ["Application"],
				"summary": "Delete an specific user of the platform.",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "User not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/NotFoundMessage"
								}
							}
						}
					}                    
				}
			}
		},
		"/application/statistics": {
			"get": {
				"tags": ["Application"],
				"summary": "Get statistics of the platform",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/PlatformStatistics"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			}
		},
		"/organizations": {
			"get": {
				"tags": ["Organization"],
				"summary": "Get all organizations in the platform - Role required: Platform_Admin",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Organizations"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			}
		},
		"/organizations/user_managed": {		
			"get": {
				"tags": ["Organization"],
				"summary": "Get all organizations managed by the logged user",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Organizations"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			}
		},
		"/organizations/user_groups_managed": {		
			"get": {
				"tags": ["Organization"],
				"summary": "Get organizations of groups managed by the logged user",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Organizations"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			}
		},
		"/organization_users/user_orgs_managed/": {		
			"get": {
				"tags": ["Organization"],
				"summary": "Get all organizations users for orgs managed by the logged user",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/UsersOutput"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			}
		},
		"/organization_users/user_groups_managed/": {		
			"get": {
				"tags": ["Organization"],
				"summary": "Get all organizations users for orgs with groups managed by the logged user",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/UsersOutput"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			}
		},		
		"/organizations/which_the_logged_user_is_user/": {		
			"get": {
				"tags": ["Organization"],
				"summary": "Get all organizations which the logged user is user",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/OrganizationsWhichTheLoggedUserIsUser"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			}
		},				
		"/organization": {
			"post": {
				"tags": ["Organization"],
				"summary": "Create a new organization - Role required: Platform_Admin",
				"requestBody": {
					"description": "Organization parameters",
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/OrganizationInput"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"409": {
						"description": "Already exists an organization with the same data",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/AlreadyExistsMessage"
								}
							}
						}
					}                    
				}
			}
		},
		"/organization/{propName}/{propValue}": {
			"parameters": [
				{
					"name": "propName",
					"in": "path",
					"required": true,
					"description": "id, name or acronym",
					"type": "string"
				},
				{
					"name": "propValue",
					"in": "path",
					"required": true,
					"description": "Organization property value",
					"type": "string"
				}
			],
			"get": {
				"tags": ["Organization"],
				"summary": "Get the organization where the property: propName (id, name, acronym) matches the value: propValue",
				"responses": {
					"200": {
						"description": "Give the organization that match with the parameters",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/OrganizationOutput"
								}
							}
						}
					},
					"400": {
						"description": "Invalid propName",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/InvalidPropName"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Organization not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/OrganizationNotFoundMessage"
								}
							}
						}
					}                    
				}
			},
			"patch": {
				"tags": ["Organization"],
				"summary": "Update the organization where the property: propName (id, name, acronym) matches the value: propValue - Role required: Platform_Admin",
				"requestBody": {
					"description": "Organization parameters",
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/OrganizationUpdate"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Organization not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/OrganizationNotFoundMessage"
								}
							}
						}
					}                    
				}
			},
			"delete": {
				"tags": ["Organization"],
				"summary": "Delete the organization where the property: propName (id, name, acronym) matches the value: propValue - Role required: Platform_Admin",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Organization not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/OrganizationNotFoundMessage"
								}
							}
						}
					}                    
				}
			}
		},
		"/organization/{orgId}/users": {
			"parameters": [
				{
					"name": "orgId",
					"in": "path",
					"required": true,
					"description": "Organization id",
					"type": "number"
				}
			],
			"get": {
				"tags": ["Organization"],
				"summary": "Get the users of the organization",
				"responses": {
					"200": {
						"description": "Give the users data of the organization",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/UsersOutput"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
                    "404": {
						"description": "Organization not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/OrganizationNotFoundMessage"
								}
							}
						}
					}                    
				}
			},
			"post": {
				"tags": ["Organization"],
				"summary": "Add users to the organization. If a user is not existent it is created. To assign roleInOrg = 'Admin' Platform_Admin role is required.",
				"requestBody": {
					"description": "Users data",
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/UsersInput"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Organization not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/OrganizationNotFoundMessage"
								}
							}
						}
					}                        
				}
			}
		},
		"/organization/{orgId}/user": {
			"parameters": [
				{
					"name": "orgId",
					"in": "path",
					"required": true,
					"description": "Organization id",
					"type": "number"
				}
			],
			"post": {
				"tags": ["Organization"],
				"summary": "Add a user to the organization. If the user is not existent it is created. To assign roleInOrg = 'Admin' Platform_Admin role is required.",
				"requestBody": {
					"description": "User data",
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/UserInput"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Organization not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/OrganizationNotFoundMessage"
								}
							}
						}
					}                        
				}
			}
		},
		"/organization/{orgId}/user/{propName}/{propValue}": {
			"parameters": [
				{
					"name": "orgId",
					"in": "path",
					"required": true,
					"description": "Organization id",
					"type": "number"
				},
				{
					"name": "propName",
					"in": "path",
					"required": true,
					"description": "id, login or email of the user",
					"type": "string"
				},
				{
					"name": "propValue",
					"in": "path",
					"required": true,
					"description": "User property value",
					"type": "string"
				}
			],
			"get": {
				"tags": ["Organization"],
				"summary": "Get an specific user data of the organization",
				"responses": {
					"200": {
						"description": "Give the user of the organization",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/UserOutput"
								}
							}
						}
					},
					"400": {
						"description": "Invalid propName",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/InvalidPropName"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Organization or User not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/NotFoundMessage"
								}
							}
						}
					}                     
				}
			},
			"patch": {
				"tags": ["Organization"],
				"summary": "Update an specific user of the organization. To assign roleInOrg = 'Admin' Platform_Admin role is required.",
				"requestBody": {
					"description": "User data",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/OrgUserRoleUpdate"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Organization or User not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/NotFoundMessage"
								}
							}
						}
					}                     
				}
			},
			"delete": {
				"tags": ["Organization"],
				"summary": "Remove an specific user of the organization.",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Organization or User not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/NotFoundMessage"
								}
							}
						}
					}                     
				}
			}
		},
		"/organization/{orgId}/users/{whoToRemove}": {
			"parameters": [
				{
					"name": "orgId",
					"in": "path",
					"required": true,
					"description": "Organization id",
					"type": "number"
				},
				{
					"name": "whoToRemove",
					"in": "path",
					"required": true,
					"description": "allUsers, allNotOrgAdminUsers or allNotGroupsAdminUsers",
					"type": "string"
				}
			],
			"delete": {
				"tags": ["Organization"],
				"summary": "Remove all users of the organization.",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Organization or User not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/NotFoundMessage"
								}
							}
						}
					}                     
				}
			}
		},
		"/buildings/user_groups_managed": {
			"get": {
				"tags": ["Building"],
				"summary": "Get all buildings for orgs with groups managed by user",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Buildings"
								}
							}
						}
					}          
				}
			}
		},
		"/building_floors/user_groups_managed": {
			"get": {
				"tags": ["Building"],
				"summary": "Get all buildings floor for orgs with groups managed by user",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Floors"
								}
							}
						}
					}          
				}
			}
		},
		"/buildings": {
			"get": {
				"tags": ["Building"],
				"summary": "Get all buildings in the platform - Role required: Platform_Admin",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Buildings"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			}
		},		
		"/building/{buildingId}": {
			"parameters": [
				{
					"name": "buildingId",
					"in": "path",
					"required": true,
					"description": "Building id",
					"type": "number"
				}				
			],
			"get": {
				"tags": ["Building"],
				"summary": "Get building by id",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/BuildingOutput"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			},
			"patch": {
				"tags": ["Building"],
				"summary": "Update building by id",
				"requestBody": {
					"description": "Member data",
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/BuildingInput"
							}
						}
					}
				},				
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			},			
			"delete": {
				"tags": ["Building"],
				"summary": "Delete building by id",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			}
		},
		"/building": {
			"post": {
				"tags": ["Building"],
				"summary": "Create building",
				"requestBody": {
					"description": "Building data",
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/BuildingInput"
							}
						}
					}
				},				
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			}
		},
		"/building_floors": {
			"get": {
				"tags": ["Building"],
				"summary": "Get all building floors in the platform - Role required: Platform_Admin",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Floors"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			}
		},
		"/building_floor/{floorId}": {
			"parameters": [
				{
					"name": "floorId",
					"in": "path",
					"required": true,
					"description": "Building floor id",
					"type": "number"
				}				
			],
			"get": {
				"tags": ["Building"],
				"summary": "Get building floor by id",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/FloorOutput"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			},
			"patch": {
				"tags": ["Building"],
				"summary": "Update building floor by id",
				"requestBody": {
					"description": "Member data",
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/FloorInput"
							}
						}
					}
				},				
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			},			
			"delete": {
				"tags": ["Building"],
				"summary": "Delete building floor by id",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			}
		},
		"/building_floor": {
			"post": {
				"tags": ["Building"],
				"summary": "Create building floor",
				"requestBody": {
					"description": "Building floor data",
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/FloorInput"
							}
						}
					}
				},				
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			}
		},		
		"/groups/{orgId}": {
			"parameters": [
				{
					"name": "orgId",
					"in": "path",
					"required": true,
					"description": "Organization id",
					"type": "number"
				}
			],
			"get": {
				"tags": ["Group"],
				"summary": "Get all groups in the organization - Role required: Organization_Admin",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Groups"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Organization not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/OrganizationNotFoundMessage"
								}
							}
						}
					}              
				}
			}
		},
		"/groups/user_managed": {		
			"get": {
				"tags": ["Group"],
				"summary": "Get all groups managed by the logged user",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Groups"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			}
		},
		"/groups/which_the_logged_user_is_member": {		
			"get": {
				"tags": ["Group"],
				"summary": "Get all groups which the logged user is member",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupsWhichTheLoggedUserIsMember"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			}
		},		
		"/group_members/user_managed": {		
			"get": {
				"tags": ["Group"],
				"summary": "Get all groups members for groups managed by the logged user",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupMembers"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}
				}
			}
		},				
		"/group/{orgId}": {
			"parameters": [
				{
					"name": "orgId",
					"in": "path",
					"required": true,
					"description": "Organization id",
					"type": "number"
				}
			],
			"post": {
				"tags": ["Group"],
				"summary": "Create a new group for the organization - Role required: Organization_Admin",
				"requestBody": {
					"description": "Group data",
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/GroupInput"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupCreationOutput"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Organization not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/OrganizationNotFoundMessage"
								}
							}
						}
					},                    
					"409": {
						"description": "Already exists a group with the same data",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/AlreadyExistsMessage"
								}
							}
						}
					}
				}
			}
		},
		"/group/{orgId}/{propName}/{propValue}": {
			"parameters": [
				{
					"name": "orgId",
					"in": "path",
					"required": true,
					"description": "Organization id",
					"type": "number"
				},
				{
					"name": "propName",
					"in": "path",
					"required": true,
					"description": "id, name or acronym of the group",
					"type": "string"
				},
				{
					"name": "propValue",
					"in": "path",
					"required": true,
					"description": "Group property value",
					"type": "string"
				}				
			],
			"get": {
				"tags": ["Group"],
				"summary": "Get a group of the organization - Role required: Organization_Admin",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupOutput"
								}
							}
						}
					},
					"400": {
						"description": "Invalid propName",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/InvalidPropName"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Organization or Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/NotFoundMessage"
								}
							}
						}
					}                     
				}
			},
			"patch": {
				"tags": ["Group"],
				"summary": "Update a group of the organization - Role required: Organization_Admin",
				"requestBody": {
					"description": "Group data",
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/GroupUpdateInput"
							}
						}
					}
				},				
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"400": {
						"description": "Invalid propName",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/InvalidPropName"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Organization or Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/NotFoundMessage"
								}
							}
						}
					}
				}
			},			
			"delete": {
				"tags": ["Group"],
				"summary": "Delete a group of the organization - Role required: Organization_Admin",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"400": {
						"description": "Invalid propName",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/InvalidPropName"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Organization or Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/NotFoundMessage"
								}
							}
						}
					}                    
				}
			}
		},
		"/group/{groupId}/member": {
			"parameters": [
				{
					"name": "groupId",
					"in": "path",
					"required": true,
					"description": "Group id",
					"type": "number"
				}
			],
			"post": {
				"tags": ["Group"],
				"summary": "Add member to the group - Role required: Group_Admin",
				"requestBody": {
					"description": "Member data",
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/GroupMemberInput"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			}			
		},		
		"/group/{groupId}/members": {
			"parameters": [
				{
					"name": "groupId",
					"in": "path",
					"required": true,
					"description": "Group id",
					"type": "number"
				}
			],
			"post": {
				"tags": ["Group"],
				"summary": "Add members for the group - Role required: Group_Admin",
				"requestBody": {
					"description": "Member data",
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/AddMembersToGroupInput"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			},
			"patch": {
				"tags": ["Group"],
				"summary": "Update members roles in the group - Role required: Group_Admin",
				"requestBody": {
					"description": "Member data",
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/AddMembersToGroupInput"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			},			
			"get": {
				"tags": ["Group"],
				"summary": "Get group members  - Role required: Group_Admin",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupMembers"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": ["Group"],
				"summary": "Remove all group members with 'Viewer' or 'Editor' - Role required: Group_Admin",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			}					
		},
		"/group/{groupId}/members_editor_or_admin": {
			"parameters": [
				{
					"name": "groupId",
					"in": "path",
					"required": true,
					"description": "Group id",
					"type": "number"
				}
			],		
			"get": {
				"tags": ["Group"],
				"summary": "Get group members with 'Editor' or 'Admin' role  - Role required: Group_Admin",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupMembers"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			}					
		},		
		"/group/{groupId}/member/{propName}/{propValue}": {
			"parameters": [
				{
					"name": "groupId",
					"in": "path",
					"required": true,
					"description": "Group id",
					"type": "number"
				},
				{
					"name": "propName",
					"in": "path",
					"required": true,
					"description": "userId, login or email of the group member",
					"type": "string"
				},
				{
					"name": "propValue",
					"in": "path",
					"required": true,
					"description": "Group member property value",
					"type": "string"
				}				
			],
			"get": {
				"tags": ["Group"],
				"summary": "Get group member by propName: id, login or email  - Role required: Group_Admin",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupMemberOutput"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			},
			"patch": {
				"tags": ["Group"],
				"summary": "Update group member role by propName: id, login or email  - Role required: Group_Admin",
				"requestBody": {
					"description": "Member data",
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/GroupMemberRoleUpdate"
							}
						}
					}
				},				
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupMemberOutput"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			},			
			"delete": {
				"tags": ["Group"],
				"summary": "Remove group member by propName: id, login or email  - Role required: Group_Admin",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			}
		},
		"/group/{groupId}/ssl_certs": {
			"parameters": [
				{
					"name": "groupId",
					"in": "path",
					"required": true,
					"description": "Group id",
					"type": "number"
				}				
			],
			"get": {
				"tags": ["Group"],
				"summary": "Get ssl certificates for the group  - Role required: Group_Admin",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/SSLCerts"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			}
								
		},
		"/group/{groupId}/change_uid": {
			"parameters": [
				{
					"name": "groupId",
					"in": "path",
					"required": true,
					"description": "Group id",
					"type": "number"
				}				
			],
			"patch": {
				"tags": ["Group"],
				"summary": "Generate a new uid for the group  - Role required: Group_Admin",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			}
		},
		"/devices/user_managed": {
			"get": {
				"tags": ["Device"],
				"summary": "Get all devices managed by the logged user",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Devices"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}          
				}
			}
		},		
		"/devices_in_org/{orgId}": {
			"parameters": [
				{
					"name": "orgId",
					"in": "path",
					"required": true,
					"description": "Organization id",
					"type": "number"
				}
			],
			"get": {
				"tags": ["Device"],
				"summary": "Get all devices in the organization - Role required: Organization_Admin",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Devices"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Organization not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/OrganizationNotFoundMessage"
								}
							}
						}
					}              
				}
			}
		},
		"/devices_in_group/{groupId}": {
			"parameters": [
				{
					"name": "groupId",
					"in": "path",
					"required": true,
					"description": "Group id",
					"type": "number"
				}
			],
			"get": {
				"tags": ["Device"],
				"summary": "Get all devices in a group of the platform - Role required: Group_Admin",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Devices"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}              
				}
			}
		},
		"/device/{groupId}/{propName}/{propValue}": {
			"parameters": [
				{
					"name": "groupId",
					"in": "path",
					"required": true,
					"description": "Group id",
					"type": "number"
				},
				{
					"name": "propName",
					"in": "path",
					"required": true,
					"description": "id, name or deviceUid of the device",
					"type": "string"
				},
				{
					"name": "propValue",
					"in": "path",
					"required": true,
					"description": "Device property value",
					"type": "string"
				}				
			],
			"get": {
				"tags": ["Device"],
				"summary": "Get device by propName: id, name or deviceUid  - Role required: Group_Admin",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DeviceOutput"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			},
			"patch": {
				"tags": ["Device"],
				"summary": "Update device by propName: id, name or deviceUid  - Role required: Group_Admin",
				"requestBody": {
					"description": "Member data",
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/DeviceInput"
							}
						}
					}
				},				
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			},			
			"delete": {
				"tags": ["Device"],
				"summary": "Delete device by propName: id, name or deviceUid  - Role required: Group_Admin",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			}
		},
		"/device_information/{groupId}/{deviceId}": {
			"parameters": [
				{
					"name": "groupId",
					"in": "path",
					"required": true,
					"description": "Group id",
					"type": "number"
				},
				{
					"name": "deviceId",
					"in": "path",
					"required": true,
					"description": "id of the device",
					"type": "string"
				}				
			],
			"post": {
				"tags": ["Device"],
				"summary": "Get device by id - Role required: Group_Admin with basic auth", 
				"security": [],
				"requestBody": {
					"description": "User credentials",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/Login"
							}
						}
					}
				},					
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DeviceOutput"
								}
							}
						}
					},
					"401": {
						"description": "User credentials not correct.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group or device not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			}
		},		
		"/device/{groupId}/changeUid/{deviceId}": {
			"parameters": [
				{
					"name": "groupId",
					"in": "path",
					"required": true,
					"description": "Group id",
					"type": "number"
				},
				{
					"name": "deviceId",
					"in": "path",
					"required": true,
					"description": "Device id",
					"type": "number"
				}			
			],
			"patch": {
				"tags": ["Device"],
				"summary": "Change deviceUid by deviceId  - Role required: Group_Admin",			
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			}
		},
		"/device/{groupId}": {
			"parameters": [
				{
					"name": "groupId",
					"in": "path",
					"required": true,
					"description": "Group id",
					"type": "number"
				}		
			],
			"post": {
				"tags": ["Device"],
				"summary": "Create device in a group  - Role required: Group_Admin",
				"requestBody": {
					"description": "Member data",
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/DeviceInput"
							}
						}
					}
				},				
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			}
		},
		"/topics/user_managed": {
			"get": {
				"tags": ["Topic"],
				"summary": "Get all Topics managed by the logged user",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Topics"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}          
				}
			}
		},		
		"/topics_in_org/{orgId}": {
			"parameters": [
				{
					"name": "orgId",
					"in": "path",
					"required": true,
					"description": "Organization id",
					"type": "number"
				}
			],
			"get": {
				"tags": ["Topic"],
				"summary": "Get all Topics in the organization - Role required: Organization_Admin",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Topics"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Organization not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/OrganizationNotFoundMessage"
								}
							}
						}
					}              
				}
			}
		},
		"/topics_in_group/{groupId}": {
			"parameters": [
				{
					"name": "groupId",
					"in": "path",
					"required": true,
					"description": "Group id",
					"type": "number"
				}
			],
			"get": {
				"tags": ["Topic"],
				"summary": "Get all Topics in a group of the platform - Role required: Group_Admin",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Topics"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}              
				}
			}
		},
		"/topic/{groupId}/{propName}/{propValue}": {
			"parameters": [
				{
					"name": "groupId",
					"in": "path",
					"required": true,
					"description": "Group id",
					"type": "number"
				},
				{
					"name": "propName",
					"in": "path",
					"required": true,
					"description": "id, name or TopicUid of the Topic",
					"type": "string"
				},
				{
					"name": "propValue",
					"in": "path",
					"required": true,
					"description": "Topic property value",
					"type": "string"
				}				
			],
			"get": {
				"tags": ["Topic"],
				"summary": "Get Topic by propName: id, name or TopicUid  - Role required: Group_Admin",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/TopicOutput"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			}
		},
		"/topic/{groupId}/{deviceId}/{topicId}": {
			"parameters": [
				{
					"name": "groupId",
					"in": "path",
					"required": true,
					"description": "Group id",
					"type": "number"
				},
				{
					"name": "deviceId",
					"in": "path",
					"required": true,
					"description": "Device id",
					"type": "string"
				},
				{
					"name": "topicId",
					"in": "path",
					"required": true,
					"description": "Topic id",
					"type": "number"
				}				
			],
			"patch": {
				"tags": ["Topic"],
				"summary": "Update Topic by propName: id, name or TopicUid  - Role required: Group_Admin",
				"requestBody": {
					"description": "Member data",
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/TopicInput"
							}
						}
					}
				},				
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			},			
			"delete": {
				"tags": ["Topic"],
				"summary": "Delete Topic by propName: id, name or TopicUid  - Role required: Group_Admin",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			}
		},		
		"/topic_information/{groupId}/{topicId}": {
			"parameters": [
				{
					"name": "groupId",
					"in": "path",
					"required": true,
					"description": "Group id",
					"type": "number"
				},
				{
					"name": "TopicId",
					"in": "path",
					"required": true,
					"description": "Topic Id",
					"type": "string"
				}				
			],
			"post": {
				"tags": ["Topic"],
				"summary": "Get Topic by id - Role required: Group_Admin with basic auth", 
				"security": [],
				"requestBody": {
					"description": "User credentials",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/Login"
							}
						}
					}
				},					
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/TopicOutput"
								}
							}
						}
					},
					"401": {
						"description": "User credentials not correct.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group or Topic not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			}
		},		
		"/topic/{groupId}/changeUid/{topicId}": {
			"parameters": [
				{
					"name": "groupId",
					"in": "path",
					"required": true,
					"description": "Group id",
					"type": "number"
				},
				{
					"name": "topicId",
					"in": "path",
					"required": true,
					"description": "Topic id",
					"type": "number"
				}			
			],
			"patch": {
				"tags": ["Topic"],
				"summary": "Change TopicUid by topicId  - Role required: Group_Admin",			
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			}
		},
		"/topic/{groupId}/{deviceId}": {
			"parameters": [
				{
					"name": "groupId",
					"in": "path",
					"required": true,
					"description": "Group id",
					"type": "number"
				},
				{
					"name": "deviceId",
					"in": "path",
					"required": true,
					"description": "Device id",
					"type": "number"
				}		
			],
			"post": {
				"tags": ["Topic"],
				"summary": "Create Topic in a group  - Role required: Group_Admin",
				"requestBody": {
					"description": "Member data",
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/TopicInput"
							}
						}
					}
				},				
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			}
		},
		"/measurement/{groupId}": {
			"parameters": [
				{
					"name": "groupId",
					"in": "path",
					"required": true,
					"description": "Group id",
					"type": "number"
				}
			],
			"post": {
				"tags": ["Measurement"],
				"summary": "Get measurement by groupId, topic and timestamp - Role required: Group_Admin",
				"requestBody": {
					"description": "Measurement request body",
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/MeasurementRequestBody"
							}
						}
					}
				},				
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/MeasurementOutput"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}              
				}
			},
			"patch": {
				"tags": ["Measurement"],
				"summary": "Update measurement by groupId, topic and timestamp  - Role required: Group_Admin",
				"requestBody": {
					"description": "New payload",
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/MeasurementUpdateBody"
							}
						}
					}
				},				
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			},			
			"delete": {
				"tags":["Measurement"],
				"summary": "Delete measurement by groupId, topic and timestamp - Role required: Group_Admin",
				"requestBody": {
					"description": "Measurement request body",
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/MeasurementRequestBody"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			}
		},
		"/measurements_last/{groupId}": {
			"parameters": [
				{
					"name": "groupId",
					"in": "path",
					"required": true,
					"description": "Group id",
					"type": "number"
				}
			],
			"post": {
				"tags": ["Measurement"],
				"summary": "Get last count measurements by groupId and timestamp  - Role required: Group_Admin",
				"requestBody": {
					"description": "Last measurements request body",
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/LastMeasurementsBody"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Measurements"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			}
		},		
		"/measurements_pagination/{groupId}": {
			"parameters": [
				{
					"name": "groupId",
					"in": "path",
					"required": true,
					"description": "Group id",
					"type": "number"
				}
			],
			"post": {
				"tags": ["Measurement"],
				"summary": "Get measurements with pagination by groupId and topic  - Role required: Group_Admin",
				"requestBody": {
					"description": "Measurements with pagination request body",
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/MeasurementsWithPaginationBody"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Measurements"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			}
		},
		"/measurements_before_date/{groupId}": {
			"parameters": [
				{
					"name": "groupId",
					"in": "path",
					"required": true,
					"description": "Group id",
					"type": "number"
				}
			],
			"delete": {
				"tags":["Measurement"],
				"summary": "Delete measurements before the indicated timestamp by groupId and topic - Role required: Group_Admin",
				"requestBody": {
					"description": "Delete measurements before date request body",
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/MeasurementsDeleteBeforeDateBody"
							}
						}
					}
				},				
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			}
		},
		"/digital_twins/user_managed": {
			"get": {
				"tags": ["Digital twin"],
				"summary": "Get all digital twins managed by the logged user",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DigitalTwins"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}          
				}
			}
		},		
		"/digital_twins_in_org/{orgId}": {
			"parameters": [
				{
					"name": "orgId",
					"in": "path",
					"required": true,
					"description": "Organization id",
					"type": "number"
				}
			],
			"get": {
				"tags": ["Digital twin"],
				"summary": "Get all digital twins in the organization - Role required: Organization_Admin",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DigitalTwins"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Organization not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/OrganizationNotFoundMessage"
								}
							}
						}
					}              
				}
			}
		},
		"/digital_twins_in_group/{groupId}": {
			"parameters": [
				{
					"name": "groupId",
					"in": "path",
					"required": true,
					"description": "Group id",
					"type": "number"
				}
			],
			"get": {
				"tags": ["Digital twin"],
				"summary": "Get all digital twins in a group of the platform - Role required: Group_Admin",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DigitalTwins"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}              
				}
			}
		},
		"/digital_twin/{groupId}/{propName}/{propValue}": {
			"parameters": [
				{
					"name": "groupId",
					"in": "path",
					"required": true,
					"description": "Group id",
					"type": "number"
				},
				{
					"name": "propName",
					"in": "path",
					"required": true,
					"description": "id or name of the digital twin",
					"type": "string"
				},
				{
					"name": "propValue",
					"in": "path",
					"required": true,
					"description": "Digital twin property value",
					"type": "string"
				}				
			],
			"get": {
				"tags": ["Digital twin"],
				"summary": "Get digital twin by propName: id or name  - Role required: Group_Admin",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DigitalTwinsOutput"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			}
		},
		"/digital_twin/{groupId}/{deviceId}/{digitalTwinId}": {
			"parameters": [
				{
					"name": "groupId",
					"in": "path",
					"required": true,
					"description": "Group id",
					"type": "number"
				},
				{
					"name": "deviceId",
					"in": "path",
					"required": true,
					"description": "Device id",
					"type": "string"
				},
				{
					"name": "digitalTwinId",
					"in": "path",
					"required": true,
					"description": "Digital twin id",
					"type": "number"
				}				
			],
			"patch": {
				"tags": ["Digital twin"],
				"summary": "Update digital twin by id  - Role required: Group_Admin",
				"requestBody": {
					"description": "Member data",
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/DigitalTwinInput"
							}
						}
					}
				},				
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			},			
			"delete": {
				"tags": ["Digital twin"],
				"summary": "Delete digital twin by id - Role required: Group_Admin",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			}
		},		
		"/digital_twin/{groupId}/{deviceId}": {
			"parameters": [
				{
					"name": "groupId",
					"in": "path",
					"required": true,
					"description": "Group id",
					"type": "number"
				},
				{
					"name": "deviceId",
					"in": "path",
					"required": true,
					"description": "Device id",
					"type": "number"
				}		
			],
			"post": {
				"tags": ["Digital twin"],
				"summary": "Create digital twin for a device in a group  - Role required: Group_Admin",
				"requestBody": {
					"description": "Member data",
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/DigitalTwinInput"
							}
						}
					}
				},				
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Message"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			}
		},
		"/dashboards/user_managed": {
			"get": {
				"tags": ["Dashboard"],
				"summary": "Get all dashboards managed by the logged user",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Dashboards"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					}          
				}
			}
		},
		"/dashboard/{groupId}/{dashboardId}": {
			"parameters": [
				{
					"name": "groupId",
					"in": "path",
					"required": true,
					"description": "Group id",
					"type": "number"
				},
				{
					"name": "dashboardId",
					"in": "path",
					"required": true,
					"description": "id the dashboard",
					"type": "string"
				}			
			],
			"get": {
				"tags": ["Dashboard"],
				"summary": "Get dashboard by id  - Role required: Group_Admin",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DashboardOutput"
								}
							}
						}
					},
					"401": {
						"description": "No auth token or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Credentials_rejected"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/GroupNotFoundMessage"
								}
							}
						}
					}
				}
			}
		}										
	},
	"definitions": {
		"UserRegister": {
			"type": "object",
			"properties": {
				"firstName": {
					"type": "string"
				},
				"surname": {
					"type": "string"
				},
				"login": {
					"type": "string"
				},
				"email": {
					"type": "string"
				},
				"password": {
					"type": "string"
				},			
				"telegramId": {
					"type": "string"
				}
			}
		},
		"UserProfile": {
			"type": "object",
			"properties": {
				"userId": {
					"type": "number"
				},
				"firstName": {
					"type": "string"
				},
				"surname": {
					"type": "string"
				},
				"login": {
					"type": "string"
				},
				"email": {
					"type": "string"
				},			
				"telegramId": {
					"type": "string"
				}
			}
		},		
		"UserRegisterData": {
			"type": "object",
			"properties": {
				"firstName": {
					"type": "string"
				},
				"surname": {
					"type": "string"
				},
				"email": {
					"type": "string"
				}
			}
		},			
		"Login": {
			"type": "object",
			"properties": {
				"emailOrLogin": {
					"type": "string"
				},
				"password": {
					"type": "string"
				}
			}
		},	
		"LoginOutput": {
			"type": "object",
			"properties": {
				"userName": {
					"type": "string"
				},
				"accessToken": {
					"type": "string"
				},
				"refreshToken": {
					"type": "string"
				},
				"expirationDate": {
					"type": "string"
				}					
			}
		},
		"RefreshToken": {
			"type": "object",
			"properties": {
				"id": {
					"type": "number"
				},
				"userId": {
					"type": "number"
				},
				"refreshToken": {
					"type": "string"
				},
				"expirationDate": {
					"type": "string"
				}					
			}
		},		
		"DisableRefreshToken": {
			"type": "object",
			"properties": {
				"refreshTokenToDisable": {
					"type": "string"
				}				
			}
		},		
		"Credentials_rejected": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"default": "invalid token"
				},
				"status": {
					"type": "number",
					"default": 401
				}
			}
		},
		"UserRole": {
			"type": "object",
			"properties": {
				"userRole": {
					"type": "string"
				}
			}
		},		
		"UserManagedComponents": {
			"type": "object",
			"properties": {
				"userRole": {
					"type": "string"
				},
				"numOrganizationManaged": {
					"type": "number"
				},
				"numGroupsManaged": {
					"type": "number"
				},
				"numDevicesManaged": {
					"type": "number"
				}
			}
		},
		"Message": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string"
				}
			}
		},
		"New_password": {
			"type": "object",
			"properties": {
				"oldPassword": {
					"type": "string"
				},
				"newPassword": {
					"type": "string"
				}
			}
		},
		"InvalidPropName": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"default": "The propName: <propName> is invalid"
				},
				"status": {
					"type": "number",
					"default": 400
				}
			}
		},
		"NotFoundMessage": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"default": "The entity with <propName>: <propValue> is not found"
				},
				"status": {
					"type": "number",
					"default": 404
				}
			}
		},
		"OrganizationNotFoundMessage": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"default": "Organizattion not found"
				},
				"status": {
					"type": "number",
					"default": 404
				}
			}
		},		
		"GroupNotFoundMessage": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"default": "Group not found"
				},
				"status": {
					"type": "number",
					"default": 404
				}
			}
		},		
		"AlreadyExistsMessage": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"default": "An entity with <propName>: <propValue> already exists in database"
				},
				"status": {
					"type": "number",
					"default": 409
				}
			}
		},           
		"OrganizationInput": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"acronym": {
					"type": "string"
				},
				"address": {
					"type": "string"
				},
				"city": {
					"type": "string"
				},
				"zipCode": {
					"type": "string"
				},
				"state": {
					"type": "string"
				},
				"country": {
					"type": "string"
				},
				"telegramInvitationLink": {
					"type": "string"
				},
				"telegramChatId": {
					"type": "string"
				},													
				"orgAdminArray": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/OrgAdminInput"
					}
				}
			}
		},
		"OrganizationUpdate": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"acronym": {
					"type": "string"
				},
				"address": {
					"type": "string"
				},
				"city": {
					"type": "string"
				},
				"zipCode": {
					"type": "string"
				},
				"state": {
					"type": "string"
				},
				"country": {
					"type": "string"
				}				
			}
		},		
		"OrgAdminInput": {
			"properties": {
				"firstName": {
					"type": "string"
				},
				"surname": {
					"type": "string"
				},				
				"email": {
					"type": "string"
				},
				"login": {
					"type": "string"
				},
				"password": {
					"type": "string"
				},
				"telegramId": {
					"type": "string"
				}
			}
		},		
		"OrganizationOutput": {
			"type": "object",
			"properties": {
				"id": {
					"type": "number",
					"default": 1
				},
				"name": {
					"type": "string"
				},
				"acronym": {
					"type": "string"
				},
				"address": {
					"type": "string"
				},
				"city": {
					"type": "string"
				},
				"zipCode": {
					"type": "string"
				},
				"state": {
					"type": "string"
				},
				"country": {
					"type": "string"
				},
				"buildingId": {
					"type": "number"
				}
			}
		},
		"Organizations": {
			"type": "array",
			"items": {
				"$ref": "#/definitions/OrganizationOutput"
			}
		},
		"OrganizationWhichTheLoggedUserIsUser": {
			"type": "object",
			"properties": {
				"id": {
					"type": "number",
					"default": 1
				},
				"name": {
					"type": "string"
				},
				"acronym": {
					"type": "string"
				},
				"address": {
					"type": "string"
				},
				"city": {
					"type": "string"
				},
				"zipCode": {
					"type": "string"
				},
				"state": {
					"type": "string"
				},
				"country": {
					"type": "string"
				},
				"buildingId": {
					"type": "number"
				},				
				"roleInOrg": {
					"type": "string"
				}	
			}
		},
		"OrganizationsWhichTheLoggedUserIsUser": {
			"type": "array",
			"items": {
				"$ref": "#/definitions/OrganizationWhichTheLoggedUserIsUser"
			}
		},			
		"propName": {
			"properties": {
				"propName": {
					"type": "string"
				}
			}
		},
		"propValue": {
			"properties": {
				"propValue": {
					"type": "string"
				}
			}
		},
		"BuildingInput": {
			"properties": {
				"name": {
					"type": "string"
				},
				"longitude": {
					"type": "number"
				},
				"latitude": {
					"type": "number"
				},
				"geoJsonData": {
					"type": "string"
				}
			}
		},
		"BuildingOutput": {
			"properties": {
				"id": {
					"type": "number",
					"default": 1
				},
				"name": {
					"type": "string"
				},
				"longitude": {
					"type": "number"
				},
				"latitude": {
					"type": "number"
				},
				"geoJsonData": {
					"type": "string"
				},
				"created": {
					"type": "string"
				},										
				"updated": {
					"type": "string"
				}
			}
		},
		"Buildings": {
			"type": "array",
			"items": {
				"$ref": "#/definitions/BuildingOutput"
			}
		},
		"FloorInput": {
			"properties": {
				"buildingId": {
					"type": "number"
				},
				"floorNumber": {
					"type": "number"
				},
				"geoJsonData": {
					"type": "string"
				}
			}
		},
		"FloorOutput": {
			"properties": {
				"id": {
					"type": "number",
					"default": 1
				},
				"name": {
					"type": "string"
				},
				"buildingId": {
					"type": "number"
				},
				"floorNumber": {
					"type": "number"
				},
				"geoJsonData": {
					"type": "string"
				},
				"created": {
					"type": "string"
				},										
				"updated": {
					"type": "string"
				}
			}
		},
		"Floors": {
			"type": "array",
			"items": {
				"$ref": "#/definitions/FloorOutput"
			}
		},		
		"UserInput": {
			"properties": {
				"firstName": {
					"type": "string"
				},
				"surname": {
					"type": "string"
				},
				"email": {
					"type": "string"
				},
				"login": {
					"type": "string"
				},
				"password": {
					"type": "string"
				},
				"telegramId": {
					"type": "string"
				},
				"roleInOrg": {
					"type": "string",
					"default": "Viewer"
				}
			},
			"required": [
				"firstName",
				"surname",
				"email"
			]
		},
		"UserOutput": {
			"properties": {
				"userId": {
					"type": "number",
					"default": 1
				},
				"firstName": {
					"type": "string"
				},
				"surname": {
					"type": "string"
				},
				"email": {
					"type": "string"
				},
				"login": {
					"type": "string"
				},
				"roleInOrg": {
					"type": "string"
				},
				"telegramId": {
					"type": "string"
				},
				"lastSeenAt": {
					"type": "string"
				},
				"lastSeenAtAge": {
					"type": "string"
				}
			}
		},
		"UsersOutput": {
			"type": "array",
			"items": {
				"$ref": "#/definitions/UserOutput"
			}
		},
		"UsersInput": {
			"type": "object",
			"properties": {
				"users": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/UserInput"
					}
				}
			}
		},
		"GlobalUserInput": {
			"properties": {
				"firstName": {
					"type": "string"
				},
				"surname": {
					"type": "string"
				},
				"email": {
					"type": "string"
				},
				"login": {
					"type": "string"
				},
				"password": {
					"type": "string"
				},
				"telegramId": {
					"type": "string"
				}
			},
			"required": [
				"firstName",
				"surname",
				"email"
			]
		},
		"GlobalUserUpdate": {
			"properties": {
				"firstName": {
					"type": "string"
				},
				"surname": {
					"type": "string"
				},
				"email": {
					"type": "string"
				},
				"login": {
					"type": "string"
				},
				"password": {
					"type": "string"
				},
				"telegramId": {
					"type": "string"
				},
				"isGrafanaAdmin": {
					"type": "string"
				}
			}
		},		
		"GlobalUsersInput": {
			"type": "object",
			"properties": {
				"users": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/GlobalUserInput"
					}
				}
			}
		},
		"GlobalUserOutput": {
			"properties": {
				"id": {
					"type": "number",
					"default": 1
				},
				"firstName": {
					"type": "string"
				},
				"surname": {
					"type": "string"
				},				
				"email": {
					"type": "string"
				},
				"login": {
					"type": "string"
				},
				"telegramId": {
					"type": "string"
				},
				"isGrafanaAdmin": {
					"type": "boolean"
				},
				"isDisabled": {
					"type": "boolean"
				},
				"lastSeenAt": {
					"type": "string"
				},
				"lastSeenAtAge": {
					"type": "string"
				}
			}
		},
		"GlobalUsersOutput": {
			"type": "array",
			"items": {
				"$ref": "#/definitions/GlobalUserOutput"
			}
		},
		"OrgUserRoleUpdate": {
			"properties": {
				"roleInOrg": {
					"type": "string",
					"default": "Viewer"
				}
			}
		},		
		"PlatformStatistics": {
			"properties": {
				"orgs": {
					"type": "number"
				},
				"dashboards": {
					"type": "number"
				},
				"snapshots": {
					"type": "number"
				},
				"tags": {
					"type": "number"
				},
				"datasources": {
					"type": "number"
				},
				"playlists": {
					"type": "number"
				},
				"stars": {
					"type": "number"
				},
				"alerts": {
					"type": "number"
				},
				"users": {
					"type": "number"
				},
				"admins": {
					"type": "number"
				},
				"editors": {
					"type": "number"
				},
				"viewers": {
					"type": "number"
				},
				"activeUsers": {
					"type": "number"
				},
				"activeAdmins": {
					"type": "number"
				},
				"activeEditors": {
					"type": "number"
				},
				"activeViewers": {
					"type": "number"
				},
				"activeSessions": {
					"type": "number"
				}
			}
		},
		"GroupInput": {
			"properties": {
				"name": {
					"type": "string"
				},
				"acronym": {
					"type": "string"
				},
				"telegramInvitationLink": {
					"type": "string"
				},
				"telegramChatId": {
					"type": "string"
				},				
				"folderPermission": {
					"type": "string"
				},
				"geoJsonData": {
					"type": "string"
				},							
				"groupAdminDataArray": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/GroupAdminInput"
					}
				}				
			}
		},
		"GroupUpdateInput": {
			"properties": {
				"name": {
					"type": "string"
				},
				"acronym": {
					"type": "string"
				},
				"telegramInvitationLink": {
					"type": "string"
				},
				"telegramChatId": {
					"type": "string"
				},				
				"folderPermission": {
					"type": "string"
				},
				"geoJsonData": {
					"type": "string"
				}				
			}
		},
		"GroupAdminInput": {
			"properties": {
				"firstName": {
					"type": "string"
				},
				"surname": {
					"type": "string"
				},				
				"email": {
					"type": "string"
				}				
			}
		},		
		"GroupMemberInput": {
			"properties": {
				"firstName": {
					"type": "string"
				},
				"surname": {
					"type": "string"
				},				
				"email": {
					"type": "string"
				},
				"roleInGroup": {
					"type": "string",
					"default": "Viewer"
				}				
			}
		},
		"GroupMemberRoleUpdate": {
			"properties": {
				"roleInGroup": {
					"type": "string",
					"default": "Viewer"
				}				
			}
		},		
		"GroupMemberOutput": {
			"properties": {
				"groupId": {
					"type": "string"
				},
				"userId": {
					"type": "string"
				},				
				"firstName": {
					"type": "string"
				},
				"surname": {
					"type": "string"
				},
				"login": {
					"type": "string"
				},							
				"email": {
					"type": "string"
				},
				"telegramId": {
					"type": "string",
					"default": "Viewer"
				},				
				"roleInGroup": {
					"type": "string",
					"default": "Viewer"
				}				
			}
		},			    
		"GroupOutput": {
			"type": "object",
			"properties": {
				"id": {
					"type": "number"
				},
				"orgId": {
					"type": "number"
				},
				"teamId": {
					"type": "number"
				},
				"folderId": {
					"type": "number"
				},
				"folderUid": {
					"type": "string"
				},
				"folderPermission":{
					"type": "string"
				},																				
				"name": {
					"type": "string"
				},
				"acronym": {
					"type": "string"
				},
				"groupUid": {
					"type": "string"
				},
				"telegramInvitationLink": {
					"type": "string"
				},
				"telegramChatId": {
					"type": "string"
				},
				"emailNotificationChannelId": {
					"type": "string"
				},
				"telegramNotificationChannelId": {
					"type": "string"
				},
				"isOrgDefaultGroup": {
					"type": "boolean"
				},
				"geoJsonData": {
					"type": "string"
				}									
			}
		},
		"GroupCreationOutput": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string"
				},
				"group": {
				    "$ref": "#/definitions/GroupOutput"
				}
			}
		},
		"Groups": {
			"type": "array",
			"items": {
				"$ref": "#/definitions/GroupOutput"
			}
		},
		"GroupWhichTheLoggedUserIsMember": {
			"type": "object",
			"properties": {
				"groupId": {
					"type": "number"
				},
				"orgId": {
					"type": "number"
				},								
				"name": {
					"type": "string"
				},
				"acronym": {
					"type": "string"
				},
				"telegramInvitationLink": {
					"type": "string"
				},
				"telegramChatId": {
					"type": "string"
				},
				"roleInGroup:": {
					"type": "string"
				}
			}
		},
		"GroupsWhichTheLoggedUserIsMember": {
			"type": "array",
			"items": {
				"$ref": "#/definitions/GroupWhichTheLoggedUserIsMember"
			}
		},		
		"AddMembersToGroupInput": {
			"properties": {
				"members": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/GroupMemberInput"
					}
				}				
			}
		},
		"GroupMembers": {
			"type": "array",
			"items": {
				"$ref": "#/definitions/GroupMemberOutput"
			}
		},
		"SSLCerts": {
			"type": "object",
			"properties": {
				"caCert": {
					"type": "string"
				},
				"clientCert": {
					"type": "string"
				},
				"clientKey": {
					"type": "string"
				},
				"validityDays": {
					"type": "string"
				}
			}
		},
		"DeviceInput": {
			"properties": {
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"longitude": {
					"type": "number"
				},
				"latitude": {
					"type": "number"
				}			
			}
		},
		"DeviceOutput": {
			"properties": {
				"id": {
					"type": "number"
				},
				"orgId": {
					"type": "number"
				},
				"groupId": {
					"type": "number"
				},										
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},				
				"longitude": {
					"type": "number"
				},
				"latitude": {
					"type": "number"
				},
				"created": {
					"type": "string"
				},										
				"updated": {
					"type": "string"
				}	
			}
		},
		"Devices": {
			"type": "array",
			"items": {
				"$ref": "#/definitions/DeviceOutput"
			}
		},
		"TopicInput": {
			"properties": {
				"topicName": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"topicType": {
					"type": "string"
				},				
				"payloadFormat": {
					"type": "string"
				}	
			}
		},		
		"TopicOutput": {
			"properties": {
				"id": {
					"type": "number"
				},
				"orgId": {
					"type": "number"
				},
				"groupId": {
					"type": "number"
				},
				"deviceId": {
					"type": "number"
				},														
				"topicName": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"topicType": {
					"type": "string"
				},				
				"payloadFormat": {
					"type": "string"
				},
				"created": {
					"type": "string"
				},										
				"updated": {
					"type": "string"
				}	
			}
		},
		"Topics": {
			"type": "array",
			"items": {
				"$ref": "#/definitions/TopicOutput"
			}
		},
		"MeasurementInput": {
			"properties": {			
				"payload": {
					"type": "string"
				}	
			}
		},
		"MeasurementOutput": {
			"properties": {
				"timestamp": {
					"type": "string"
				},
				"topic": {
					"type": "string"
				},				
				"payload": {
					"type": "string"
				}
			}
		},
		"MeasurementsWithPaginationBody": {
			"properties": {
				"topic": {
					"type": "string"
				},
				"startDate": {
					"type": "string"
				},
				"endDate": {
					"type": "string"
				},						
				"pageIndex": {
					"type": "number"
				},
				"itemsPerPage": {
					"type": "number"
				}				
			}
		},
		"MeasurementRequestBody": {
			"properties": {
				"timestamp": {
					"type": "string"
				},
				"topic": {
					"type": "string"
				}
			}
		},
		"LastMeasurementsBody": {
			"properties": {
				"topic": {
					"type": "string"
				},
				"count": {
					"type": "number"
				}
			}
		},		
		"MeasurementUpdateBody": {
			"properties": {
				"timestamp": {
					"type": "string"
				},
				"topic": {
					"type": "string"
				},				
				"updatedPayload": {
					"type": "string"
				}
			}
		},
		"MeasurementsDeleteBeforeDateBody": {
			"properties": {
				"topic": {
					"type": "string"
				},
				"deleteDate": {
					"type": "string"
				}
			}
		},				
		"Measurements": {
			"type": "array",
			"items": {
				"$ref": "#/definitions/MeasurementOutput"
			}
		},
		"DigitalTwinInput": {
			"properties": {
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"url": {
					"type": "string"
				}
			}
		},		
		"DigitalTwinOutput": {
			"properties": {
				"id": {
					"type": "number"
				},
				"orgId": {
					"type": "number"
				},
				"groupId": {
					"type": "number"
				},
				"deviceId": {
					"type": "number"
				},														
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"url": {
					"type": "string"
				},
				"created": {
					"type": "string"
				},										
				"updated": {
					"type": "string"
				}	
			}
		},
		"DigitalTwins": {
			"type": "array",
			"items": {
				"$ref": "#/definitions/DigitalTwinOutput"
			}
		},
		"DashboardOutput": {
			"properties": {
				"id": {
					"type": "number"
				},
				"orgId": {
					"type": "number"
				},
				"groupId": {
					"type": "number"
				},																	
				"slug": {
					"type": "string"
				},
				"title": {
					"type": "string"
				},
				"uid": {
					"type": "string"
				},
				"created": {
					"type": "string"
				},										
				"updated": {
					"type": "string"
				}	
			}
		},
		"Dashboards": {
			"type": "array",
			"items": {
				"$ref": "#/definitions/DashboardOutput"
			}
		}					
	}
}
  

