[{"id":"f6f2187d.f17ca8","type":"tab","label":"Flow 1","disabled":false,"info":""},{"id":"6346b608.d007a8","type":"mqtt-broker","name":"OSI4IOT_MQTT_8883","broker":"mosquitto","port":"8883","tls":"b278b10.69bfb5","clientid":"MQTT_CLIENT_ID","autoConnect":true,"usetls":true,"compatmode":false,"protocolVersion":"4","keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","birthMsg":{},"closeTopic":"","closeQos":"0","closePayload":"","closeMsg":{},"willTopic":"","willQos":"0","willPayload":"","willMsg":{},"sessionExpiry":""},{"id":"b278b10.69bfb5","type":"tls-config","name":"","cert":"/data/certs/client.crt","key":"/data/certs/client.key","ca":"/data/certs/ca.crt","certname":"","keyname":"","caname":"","servername":"","verifyservercert":false,"alpnprotocol":""},{"id":"88d45a161ac307e1","type":"debug","z":"f6f2187d.f17ca8","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":290,"y":100,"wires":[]},{"id":"684f93ff0a6a37a7","type":"comment","z":"f6f2187d.f17ca8","name":"OSI4IOT MQTT Broker can be tested sending a message to the 'MQTT_TOPIC_TEST' topic.","info":"","x":350,"y":40,"wires":[]},{"id":"a9dd51a8aeb0f3f7","type":"mqtt in","z":"f6f2187d.f17ca8","name":"Mqtt topic test","topic":"MQTT_TOPIC_TEST","qos":"2","datatype":"utf8","broker":"6346b608.d007a8","nl":false,"rap":true,"rh":0,"inputs":0,"x":110,"y":100,"wires":[["88d45a161ac307e1"]]},{"id":"7716f93d67a228bf","type":"comment","z":"f6f2187d.f17ca8","name":"Initialation of ML models. Reading Digital Twin Mqtt Topics in Group","info":"","x":260,"y":200,"wires":[]},{"id":"90239054d0ed63ae","type":"inject","z":"f6f2187d.f17ca8","name":"","props":[{"p":"payload"}],"repeat":"","crontab":"","once":true,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":110,"y":260,"wires":[["d98629daf1bf6ce1"]]},{"id":"d98629daf1bf6ce1","type":"function","z":"f6f2187d.f17ca8","name":"Initialization","func":"let dTMqttTopics = {};\ndTMqttTopics = global.get('dTMqttTopics') || {};\nmsg.payload = dTMqttTopics;\nreturn msg;","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is started.\n// Code added here will be run once\n// whenever the node is started.\nconst token = env.get(\"TOKEN\");\nconst groupId = env.get(\"GROUP_ID\");\nconst MLModels = global.get(\"MLModels\");\nconst getDTMqttTopics = global.get(\"getDTMqttTopics\");\nif (token !== \"\" && groupId !== \"0\") {\n    if (MLModels) {\n        const mlModels = new MLModels();\n        node.status({ fill: \"yellow\", shape: \"dot\", text: \"Loading ML models\" });\n        await mlModels.loadMlModels(token, groupId);\n        global.set('mlModels', mlModels, \"memory\");\n        node.status({ fill: \"green\", shape: \"dot\", text: \"Ready\" })\n    }\n    if (getDTMqttTopics) {\n        const dTMqttTopics = await getDTMqttTopics();\n        global.set('dTMqttTopics', dTMqttTopics);\n    }\n} else {\n    if (MLModels) {\n        const mlModels = new MLModels();\n        node.status({ fill: \"yellow\", shape: \"dot\", text: \"Loading ML models\" });\n        await mlModels.loadMlModelsFromFileSystem();\n        global.set('mlModels', mlModels, \"memory\");\n        node.status({ fill: \"green\", shape: \"dot\", text: \"Ready\" })\n    }\n}\n","finalize":"","libs":[],"x":290,"y":260,"wires":[["2b83f6bf647b7ddb"]]},{"id":"2b83f6bf647b7ddb","type":"debug","z":"f6f2187d.f17ca8","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":470,"y":260,"wires":[]}]